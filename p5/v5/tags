!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLOCK_SIZE	parser.h	8;"	d
BUFFER_SIZE	client.c	4;"	d	file:
BYTE_SIZE	parser.h	6;"	d
CC	Makefile	/^CC   = gcc$/;"	m
CR_t	helper.h	/^}CR_t;$/;"	t	typeref:struct:__CR_t
CR_to_Inode	helper.c	/^int CR_to_Inode(int inum, CR_t* disk_cr, imap_t* pimap, inode_t* pinode)$/;"	f
Creat_parse	parser.c	/^int Creat_parse(char* message, int* pinum, int* type, char (*name)[NAME_SIZE])$/;"	f
DEBUG	helper.h	17;"	d
DEC	parser.h	5;"	d
DirEnt_t	helper.h	/^} DirEnt_t;$/;"	t	typeref:struct:__DirEnt_t
Dir_t	helper.h	/^}Dir_t;$/;"	t	typeref:struct:__Dir_t
FUNC_CHAR	parser.h	4;"	d
IMAP_SIZE	helper.h	5;"	d
Lookup_parse	parser.c	/^int Lookup_parse(char* message, int* pinum, char (*name)[NAME_SIZE])$/;"	f
Lookup_resp	parser.c	/^int Lookup_resp(char* message, int* status)  \/\/Status can be -1 or inum$/;"	f
MAX_DIRECT_P	helper.h	8;"	d
MAX_DIR_ENTRIES	helper.h	9;"	d
MAX_IMAPS	helper.h	6;"	d
MAX_INODES	helper.h	4;"	d
MFS_BLOCK_SIZE	helper.h	13;"	d
MFS_BLOCK_SIZE	mfs.h	7;"	d
MFS_Creat	mfs.c	/^int MFS_Creat(int pinum, int type, char* name)$/;"	f
MFS_DIRECTORY	helper.h	11;"	d
MFS_DIRECTORY	mfs.h	4;"	d
MFS_DirEnt_t	mfs.h	/^} MFS_DirEnt_t;$/;"	t	typeref:struct:__MFS_DirEnt_t
MFS_Init	mfs.c	/^int MFS_Init(char* hostname, int port)$/;"	f
MFS_Lookup	mfs.c	/^int MFS_Lookup(int pinum, char* name)$/;"	f
MFS_REGULAR_FILE	helper.h	12;"	d
MFS_REGULAR_FILE	mfs.h	5;"	d
MFS_Read	mfs.c	/^int MFS_Read(int inum, char* buffer, int block)$/;"	f
MFS_Shutdown	mfs.c	/^int MFS_Shutdown()$/;"	f
MFS_Stat	mfs.c	/^int MFS_Stat(int inum, MFS_Stat_t* m)$/;"	f
MFS_Stat_t	mfs.h	/^} MFS_Stat_t;$/;"	t	typeref:struct:__MFS_Stat_t
MFS_Unlink	mfs.c	/^int MFS_Unlink(int pinum, char* name)$/;"	f
MFS_Write	mfs.c	/^int MFS_Write(int inum, char* buffer, int block)$/;"	f
MSG_BUFFER_SIZE	helper.h	15;"	d
NAME_SIZE	parser.h	7;"	d
OPTS	Makefile	/^OPTS = -Wall$/;"	m
Read_parse	parser.c	/^int Read_parse(char* message, int* inum, int* block)$/;"	f
S_Creat	helper.c	/^int S_Creat(int pinum, int type, char *name)$/;"	f
S_Lookup	helper.c	/^int S_Lookup(int pinum, char* name)$/;"	f
S_Read	helper.c	/^int S_Read(int inum, char (*buffer)[MFS_BLOCK_SIZE], int block, int* type, int* entries)$/;"	f
S_Stat	helper.c	/^int S_Stat(int inum, S_Stat_t* m){$/;"	f
S_Stat_t	helper.h	/^}S_Stat_t;$/;"	t	typeref:struct:__S_Stat_t
S_Unlink	helper.c	/^int S_Unlink(int pinum, char* name)$/;"	f
S_Write	helper.c	/^int S_Write(int inum, char *buffer, int block)$/;"	f
Stat_parse	parser.c	/^int Stat_parse(char* message, int* inum)$/;"	f
UDP_Close	udp.c	/^UDP_Close(int fd)$/;"	f
UDP_FillSockAddr	udp.c	/^UDP_FillSockAddr(struct sockaddr_in *addr, char *hostName, int port)$/;"	f
UDP_Open	udp.c	/^UDP_Open(int port)$/;"	f
UDP_Read	udp.c	/^UDP_Read(int fd, struct sockaddr_in *addr, char *buffer, int n)$/;"	f
UDP_Write	udp.c	/^UDP_Write(int fd, struct sockaddr_in *addr, char *buffer, int n)$/;"	f
Unlink_parse	parser.c	/^int Unlink_parse(char* message, int* pinum, char (*name)[NAME_SIZE])$/;"	f
Write_parse	parser.c	/^int Write_parse(char* message, int* inum, char (*buffer)[MFS_BLOCK_SIZE], int* block)$/;"	f
__CR_t	helper.h	/^typedef struct __CR_t$/;"	s
__DirEnt_t	helper.h	/^typedef struct __DirEnt_t {$/;"	s
__Dir_t	helper.h	/^typedef struct __Dir_t$/;"	s
__Inode_t	helper.h	/^typedef struct __Inode_t$/;"	s
__MFS_DirEnt_t	mfs.h	/^typedef struct __MFS_DirEnt_t {$/;"	s
__MFS_Stat_t	mfs.h	/^typedef struct __MFS_Stat_t {$/;"	s
__MFS_h__	mfs.h	2;"	d
__PARSER_H_	parser.h	2;"	d
__S_Stat_t	helper.h	/^typedef struct __S_Stat_t {$/;"	s
__UDP_h__	udp.h	2;"	d
__helper_h__	helper.h	2;"	d
__imap_t	helper.h	/^typedef struct __imap_t$/;"	s
__packet_t	helper.h	/^typedef struct __packet_t$/;"	s
addr	helper.h	/^	struct sockaddr_in addr;					\/\/ Socket address$/;"	m	struct:__packet_t	typeref:struct:__packet_t::sockaddr_in
buffer	client.c	/^char buffer[BUFFER_SIZE];$/;"	v
buffer	helper.h	/^	char buffer[MSG_BUFFER_SIZE];				\/\/Recieved message$/;"	m	struct:__packet_t
com_t	mfs.c	/^static packet_t com_t; $/;"	v	file:
create_img	helper.c	/^int create_img(char* file_path)$/;"	f
db_read	helper.c	/^int db_read(int seek_off, Dir_t* pdir)$/;"	f
disk_fd	helper.h	/^int disk_fd;   \/\/Disk FD $/;"	v
dp	helper.h	/^	uint dp[MAX_DIRECT_P]; \/\/14 direct pointers$/;"	m	struct:__Inode_t
entry	helper.h	/^	DirEnt_t entry[MAX_DIR_ENTRIES];$/;"	m	struct:__Dir_t
get_args	server.c	/^void get_args(int* port, char** file_img, int argc, char* argv[])$/;"	f
get_cr	helper.c	/^int get_cr(CR_t* lkp_cr_addr)$/;"	f
get_imap	helper.c	/^int get_imap(int seek_off, imap_t* pimap)$/;"	f
get_inode	helper.c	/^int get_inode(int seek_off, inode_t* pinode)$/;"	f
imap_p	helper.h	/^	uint imap_p[MAX_IMAPS];$/;"	m	struct:__CR_t
imap_t	helper.h	/^}imap_t;$/;"	t	typeref:struct:__imap_t
inode_p	helper.h	/^	uint inode_p[IMAP_SIZE]; \/\/16 inode pointers$/;"	m	struct:__imap_t
inode_t	helper.h	/^}inode_t;$/;"	t	typeref:struct:__Inode_t
inum	helper.h	/^		int  inum;      \/\/ inode number of entry (-1 means entry not used)$/;"	m	struct:__DirEnt_t
inum	mfs.h	/^		int  inum;      \/\/ inode number of entry (-1 means entry not used)$/;"	m	struct:__MFS_DirEnt_t
log_end	helper.h	/^	uint log_end;$/;"	m	struct:__CR_t
main	client.c	/^main(int argc, char *argv[])$/;"	f
main	server.c	/^main(int argc, char *argv[])$/;"	f
main	test.c	/^int main(int argc, char** argv)$/;"	f
main	test1.c	/^int main(int argc, char** argv)$/;"	f
main	test_parse.c	/^int main()$/;"	f
message	helper.h	/^	char message[MSG_BUFFER_SIZE];			 \/\/Message to send$/;"	m	struct:__packet_t
name	helper.h	/^		char name[60];  \/\/ up to 60 bytes of name in directory (including \\0)$/;"	m	struct:__DirEnt_t
name	mfs.h	/^		char name[60];  \/\/ up to 60 bytes of name in directory (including \\0)$/;"	m	struct:__MFS_DirEnt_t
packet_t	helper.h	/^}packet_t;$/;"	t	typeref:struct:__packet_t
parse_msg	parser.c	/^int parse_msg(char* message)$/;"	f
recv_msg	mfs.c	/^int recv_msg() \/\/TODO::Timeout functionality$/;"	f
sd	helper.h	/^	int sd;   												 \/\/Socket descriptor to communicate$/;"	m	struct:__packet_t
send_ack	helper.h	/^	int send_ack;								   \/\/Send ack to track the sent msgs$/;"	m	struct:__packet_t
send_msg	mfs.c	/^int send_msg()$/;"	f
send_resp	server.c	/^int send_resp(int sd, struct sockaddr_in* s, char* response)$/;"	f
size	helper.h	/^			int size;   \/\/ bytes$/;"	m	struct:__S_Stat_t
size	helper.h	/^	int size;$/;"	m	struct:__Inode_t
size	mfs.h	/^			int size;   \/\/ bytes$/;"	m	struct:__MFS_Stat_t
type	helper.h	/^	    int type;   \/\/ MFS_DIRECTORY or MFS_REGULAR$/;"	m	struct:__S_Stat_t
type	helper.h	/^	int type;        \/\/Regular or directory$/;"	m	struct:__Inode_t
type	mfs.h	/^	    int type;   \/\/ MFS_DIRECTORY or MFS_REGULAR$/;"	m	struct:__MFS_Stat_t
uint	helper.h	/^typedef unsigned int uint;$/;"	t
