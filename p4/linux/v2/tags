!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accept	cs537.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Bind	cs537.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall$/;"	m
Close	cs537.c	/^void Close(int fd) $/;"	f
Connect	cs537.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
DEF_MODE	cs537.h	29;"	d
DEF_UMASK	cs537.h	30;"	d
Dup2	cs537.c	/^int Dup2(int fd1, int fd2) $/;"	f
Execve	cs537.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
FIFO	server.c	/^typedef enum {FIFO, SFNF, SFF} algo_t;$/;"	e	enum:__anon2	file:
Fork	cs537.c	/^pid_t Fork(void) $/;"	f
Fstat	cs537.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Gethostbyaddr	cs537.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	cs537.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Gethostname	cs537.c	/^int Gethostname(char *name, size_t len) $/;"	f
LIBS	Makefile	/^LIBS = -lpthread $/;"	m
LISTENQ	cs537.h	56;"	d
Listen	cs537.c	/^void Listen(int s, int backlog) $/;"	f
Lseek	cs537.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
MAXBUF	cs537.h	55;"	d
MAXLINE	cs537.h	54;"	d
Mmap	cs537.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Munmap	cs537.c	/^void Munmap(void *start, size_t length) $/;"	f
OBJS	Makefile	/^OBJS = server.o request.o cs537.o client.o$/;"	m
Open	cs537.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open_clientfd	cs537.c	/^int Open_clientfd(char *hostname, int port) $/;"	f
Open_listenfd	cs537.c	/^int Open_listenfd(int port) $/;"	f
Pthread_cond_init	server.c	/^void Pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr){$/;"	f
Pthread_cond_signal	server.c	/^void Pthread_cond_signal(pthread_cond_t *cond){$/;"	f
Pthread_cond_wait	server.c	/^void Pthread_cond_wait(pthread_cond_t* cond, pthread_mutex_t* mutex){$/;"	f
Pthread_create	server.c	/^void Pthread_create(pthread_t *thread, const pthread_attr_t *attr,void *(*start_routine) (void *), void *arg){$/;"	f
Pthread_mutex_init	server.c	/^void Pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr){$/;"	f
Pthread_mutex_lock	server.c	/^void Pthread_mutex_lock(pthread_mutex_t *mutex){$/;"	f
Pthread_mutex_unlock	server.c	/^void Pthread_mutex_unlock(pthread_mutex_t *mutex){$/;"	f
RIO_BUFSIZE	cs537.h	40;"	d
Read	cs537.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Rio_readinitb	cs537.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	cs537.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	cs537.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	cs537.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	cs537.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
SA	cs537.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
SFF	server.c	/^typedef enum {FIFO, SFNF, SFF} algo_t;$/;"	e	enum:__anon2	file:
SFNF	server.c	/^typedef enum {FIFO, SFNF, SFF} algo_t;$/;"	e	enum:__anon2	file:
Select	cs537.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Setenv	cs537.c	/^int Setenv(const char *name, const char *value, int overwrite)$/;"	f
Setsockopt	cs537.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Socket	cs537.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Stat	cs537.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
TARGET	Makefile	/^TARGET = server$/;"	m
Time_GetSeconds	output.c	/^double Time_GetSeconds() {$/;"	f
Wait	cs537.c	/^pid_t Wait(int *status) $/;"	f
Write	cs537.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
__CSAPP_H__	cs537.h	2;"	d
algo_t	server.c	/^typedef enum {FIFO, SFNF, SFF} algo_t;$/;"	t	typeref:enum:__anon2	file:
app_error	cs537.c	/^void app_error(char *msg) \/* application error *\/$/;"	f
buffer_size	server.c	/^int buffer_size=0;$/;"	v
clientPrint	client.c	/^void clientPrint(int fd)$/;"	f
clientSend	client.c	/^void clientSend(int fd, char *filename)$/;"	f
connfd	server.c	/^int* connfd;$/;"	v
dns_error	cs537.c	/^void dns_error(char *msg) \/* dns-style error *\/$/;"	f
do_get	server.c	/^int do_get(){$/;"	f
dump	server.c	/^void dump(){$/;"	f
empty	server.c	/^pthread_cond_t empty = PTHREAD_COND_INITIALIZER, full = PTHREAD_COND_INITIALIZER;$/;"	v
fd	server.c	/^	int fd;$/;"	m	struct:__anon3	file:
filename	server.c	/^	char* filename;$/;"	m	struct:__anon3	file:
filesize	server.c	/^	int filesize;$/;"	m	struct:__anon3	file:
full	server.c	/^pthread_cond_t empty = PTHREAD_COND_INITIALIZER, full = PTHREAD_COND_INITIALIZER;$/;"	v
getargs	output.c	/^void getargs()$/;"	f
getargs	server.c	/^void getargs(int *port, int *threads, int *buffers, algo_t *schedalg, int argc, char *argv[])$/;"	f
m	server.c	/^pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;$/;"	v
main	client.c	/^int main(int argc, char *argv[])$/;"	f
main	output.c	/^int main(int argc, char *argv[])$/;"	f
main	server.c	/^int main(int argc, char *argv[])$/;"	f
open_clientfd	cs537.c	/^int open_clientfd(char *hostname, int port) $/;"	f
open_listenfd	cs537.c	/^int open_listenfd(int port) $/;"	f
parseFile	server.c	/^void parseFile(int fd){$/;"	f
posix_error	cs537.c	/^void posix_error(int code, char *msg) \/* posix-style error *\/$/;"	f
req	server.c	/^reqfile_t *req;$/;"	v
reqfile_t	server.c	/^}reqfile_t;$/;"	t	typeref:struct:__anon3	file:
requestError	request.c	/^void requestError(int fd, char *cause, char *errnum, char *shortmsg, char *longmsg) $/;"	f
requestGetFiletype	request.c	/^void requestGetFiletype(char *filename, char *filetype)$/;"	f
requestHandle	request.c	/^void requestHandle(int fd)$/;"	f
requestParseURI	request.c	/^int requestParseURI(char *uri, char *filename, char *cgiargs) $/;"	f
requestReadhdrs	request.c	/^void requestReadhdrs(rio_t *rp)$/;"	f
requestServeDynamic	request.c	/^void requestServeDynamic(int fd, char *filename, char *cgiargs)$/;"	f
requestServeStatic	request.c	/^void requestServeStatic(int fd, char *filename, int filesize) $/;"	f
rio_buf	cs537.h	/^    char rio_buf[RIO_BUFSIZE]; \/* internal buffer *\/$/;"	m	struct:__anon1
rio_bufptr	cs537.h	/^    char *rio_bufptr;          \/* next unread byte in internal buf *\/$/;"	m	struct:__anon1
rio_cnt	cs537.h	/^    int rio_cnt;               \/* unread bytes in internal buf *\/$/;"	m	struct:__anon1
rio_fd	cs537.h	/^    int rio_fd;                \/* descriptor for this internal buf *\/$/;"	m	struct:__anon1
rio_read	cs537.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	cs537.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	cs537.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	cs537.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	cs537.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_t	cs537.h	/^} rio_t;$/;"	t	typeref:struct:__anon1
rio_writen	cs537.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
sched_alg	server.c	/^algo_t sched_alg;																	\/\/this is enumerated variable to decide the scheduling algorithm$/;"	v
service	server.c	/^volatile int tail, service=0;$/;"	v
spinfor	output.c	/^double spinfor = 5.0;$/;"	v
tail	server.c	/^volatile int tail, service=0;$/;"	v
unix_error	cs537.c	/^void unix_error(char *msg) \/* unix-style error *\/$/;"	f
worker_routine	server.c	/^void* worker_routine(void* argv){$/;"	f
